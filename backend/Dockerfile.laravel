# # Use PHP 7.4 with FPM (FastCGI Process Manager)
# FROM php:7.4-fpm

# # Install system dependencies required for Laravel and common PHP extensions
# RUN apt-get update && apt-get install -y \
#     libpq-dev \
#     libzip-dev \
#     unzip \
#     git \
#     curl \
#     wget \
#     && rm -rf /var/lib/apt/lists/*

# # Install necessary PHP extensions for Laravel (PostgreSQL and Zip in this case)
# RUN docker-php-ext-install pdo pdo_pgsql pgsql zip

# # Download and install Composer globally
# RUN curl -sS https://getcomposer.org/installer | php -- \
#     --install-dir=/usr/local/bin \
#     --filename=composer

# # Install Dockerize
# RUN wget https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz -O dockerize.tar.gz \
#     && tar -C /usr/local/bin -xzvf dockerize.tar.gz \
#     && rm dockerize.tar.gz

# # Set working directory inside the container
# WORKDIR /var/www/html

# # Copy the application code to the container
# COPY . /var/www/html


# # Install Composer dependencies
# RUN composer install --no-interaction --prefer-dist --optimize-autoloader \
# && composer require laravel/sanctum \
# && composer require nwidart/laravel-modules

# # Set the correct permissions for the Laravel storage and bootstrap directories
# RUN chmod -R 777 storage bootstrap/cache

# COPY .env.example .env
# # Generate application key, clear cache, and discover packages
# RUN php artisan key:generate
# RUN php artisan optimize:clear
# RUN php artisan package:discover --ansi

# # Copy the entrypoint script into the container and ensure it is executable
# COPY entrypoint.sh /usr/local/bin/entrypoint.sh
# RUN chmod +x /usr/local/bin/entrypoint.sh

# # Use the entrypoint script to setup the application
# ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]


# CMD php artisan serve --host=0.0.0.0 --port=8001

#production
# Use PHP 7.4 with FPM (FastCGI Process Manager)
FROM php:7.4-fpm AS php-base

# Install system dependencies required for Laravel and common PHP extensions
RUN apt-get update && apt-get install -y \
    libpq-dev \
    libzip-dev \
    unzip \
    git \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install necessary PHP extensions for Laravel (PostgreSQL and Zip in this case)
RUN docker-php-ext-install pdo pdo_pgsql pgsql zip

# Download and install Composer globally
RUN curl -sS https://getcomposer.org/installer | php -- \
    --install-dir=/usr/local/bin \
    --filename=composer

# Install Dockerize
RUN wget https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz -O dockerize.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize.tar.gz \
    && rm dockerize.tar.gz

# Set working directory inside the container
WORKDIR /var/www/html

# Copy the application code to the container
COPY . /var/www/html

# Install Composer dependencies
RUN composer install --no-interaction --prefer-dist --optimize-autoloader \
    && composer require laravel/sanctum \
    && composer require nwidart/laravel-modules

# Set the correct permissions for the Laravel storage and bootstrap directories
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache \
    && chmod -R 755 /var/www/html/storage /var/www/html/bootstrap/cache

# Copy the entrypoint script into the container and ensure it is executable
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Estágio 2: Configuração do servidor Nginx
FROM nginx:stable AS nginx-server

# Copiar o arquivo de configuração do Nginx
COPY nginx.conf /etc/nginx/nginx.conf

# Copiar o código da aplicação do estágio anterior
COPY --from=php-base /var/www/html /var/www/html

# Expor a porta 80 para o tráfego HTTP
EXPOSE 80

# Usar o script de entrypoint para iniciar os serviços
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Iniciar o Nginx em primeiro plano
CMD ["nginx", "-g", "daemon off;"]
