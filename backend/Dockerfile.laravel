# Use a imagem base oficial do PHP com FPM
FROM php:7.4-fpm

# Instale as dependências necessárias
RUN apt-get update && apt-get install -y \
    libpq-dev \
    libzip-dev \
    unzip \
    git \
    wget \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Instale as extensões necessárias do PHP
RUN docker-php-ext-install pdo_pgsql zip

# Instale o Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Configure o diretório de trabalho
WORKDIR /var/www/html

# Copie o código da aplicação para o contêiner
COPY . .

# Configure as permissões adequadas
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache

# Permita que o Composer seja executado como root
ENV COMPOSER_ALLOW_SUPERUSER 1

# Instale as dependências do Composer
RUN composer install --no-interaction --optimize-autoloader
RUN php artisan clear:all

# Copie o arquivo de configuração do Nginx
COPY nginx.conf /etc/nginx/nginx.conf

# Copie o script de entrypoint
COPY entrypoint.sh /usr/local/bin/entrypoint.sh

# Torne o script de entrypoint executável
RUN chmod +x /usr/local/bin/entrypoint.sh

# Exponha a porta 80 para Nginx
EXPOSE 80

# Use o script de entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# # Path: backend/Dockerfile.laravel - development

# # Use a imagem base do PHP 7.4 FPM
# FROM php:7.4-fpm

# # Instale as dependências necessárias
# RUN apt-get update && apt-get install -y \
#     libpq-dev \
#     libzip-dev \
#     unzip \
#     p7zip-full \
#     git \
#     netcat \
#     && rm -rf /var/lib/apt/lists/*

# # Instale as extensões necessárias do PHP
# RUN docker-php-ext-install pdo_pgsql zip

# # Instale o Composer
# RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# # Adicione o script wait-for-it.sh
# ADD https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh /usr/local/bin/wait-for-it.sh
# RUN chmod +x /usr/local/bin/wait-for-it.sh

# # Configure o diretório de trabalho
# WORKDIR /var/www/html

# # Copie o código da aplicação para o contêiner
# COPY . .

# # Configure as permissões adequadas
# RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache

# # Permita que o Composer seja executado como root
# ENV COMPOSER_ALLOW_SUPERUSER 1

# # Instale as dependências do Composer
# RUN composer install --no-interaction --optimize-autoloader
# RUN php artisan cache:clear && php artisan config:clear

# EXPOSE 8001

# # Defina o comando padrão para esperar pelo banco de dados e iniciar o servidor Laravel
# CMD /usr/local/bin/wait-for-it.sh -t 30 db:5432 -- php artisan migrate:fresh --seed && php artisan db:adjust-sequences && php artisan serve --host=0.0.0.0 --port=8001
